<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LoadRunner调试记录</title>
    <link href="/2022/04/24/LoadRunner/"/>
    <url>/2022/04/24/LoadRunner/</url>
    
    <content type="html"><![CDATA[<h6 id="Action-c-113-Error-27792-Failed-to-connect-to-server-“iecvlist-microsoft-com-443”-10051-Network-is-unreachable-MsgId-MERR-27792"><a href="#Action-c-113-Error-27792-Failed-to-connect-to-server-“iecvlist-microsoft-com-443”-10051-Network-is-unreachable-MsgId-MERR-27792" class="headerlink" title="Action.c(113): Error -27792: Failed to connect to server “iecvlist.microsoft.com:443”: [10051] Network is unreachable      [MsgId: MERR-27792]"></a>Action.c(113): Error -27792: Failed to connect to server “iecvlist.microsoft.com:443”: [10051] Network is unreachable      [MsgId: MERR-27792]</h6><p>解决： 关闭IP Spoofer</p><p><img src="C:\Users\靖儿的小小新\AppData\Roaming\Typora\typora-user-images\image-20220424110906049.png" alt="image-20220424110906049"></p>]]></content>
    
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firstblog</title>
    <link href="/2022/01/30/firstblog/"/>
    <url>/2022/01/30/firstblog/</url>
    
    <content type="html"><![CDATA[<p>好了</p><p>现在可以写博客了</p><p>我又修改了</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习记录</title>
    <link href="/2021/04/11/third/"/>
    <url>/2021/04/11/third/</url>
    
    <content type="html"><![CDATA[<h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>通过一个对象代理对另一个对象中的属性的操作（读/写）</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;<br><span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(obj2,<span class="hljs-string">&#x27;x&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> obj1.x;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>obj1.x = value;<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="Vue数据代理"><a href="#Vue数据代理" class="headerlink" title="Vue数据代理"></a>Vue数据代理</h4><p>过程一、创建Vue实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;scnu&#x27;</span>,<br>        <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;school of software&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>过程二、产生vm对象基本结构(当Vue还未进行数据代理时)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vm &#123;<br>    <span class="hljs-attr">$attre</span>:xxx,<br>    <span class="hljs-attr">$childres</span>:xxx,<br>......<br><span class="hljs-attr">_data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;scnu&#x27;</span><br><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;school of software&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>过程三、vm对象基本结构(当Vue进行数据代理后)</p><p>通过数据代理给vm对象添加_data中一模一样的属性name, address，</p><p>相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vm &#123;<br>    <span class="hljs-attr">$attre</span>:xxx,<br>    <span class="hljs-attr">$childres</span>:xxx,<br>......<br><span class="hljs-attr">_data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;scnu&#x27;</span><br><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;school of software&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(vm,<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> _data.name;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>_data.name = value;<br>&#125;<br>&#125;)<br><span class="hljs-built_in">Object</span>.defineProperty(vm,<span class="hljs-string">&#x27;address&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> _data.adress;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>_data.adress = value;<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>于是vm的_data中的属性就被拿到了vm中，方便后续的编码</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 1.Vue中的数据代理：</p><p>​              通过vm对象来代理data对象中属性的操作（读/写）</p><p>​        2.Vue中数据代理的好处：</p><p>​              更加方便的操作data中的数据</p><p>​        3.基本原理：</p><p>​              通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>​              为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>​              在getter/setter内部去操作（读/写）data中对应的属性。</p><p><img src="D:\CodeSpace\blog\blog_img\image-20220506233447090.png" alt="image-20220506233447090"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><p>​              1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</p><p>​              2.事件的回调需要配置在methods对象中，最终会在vm上；</p><p>​              3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；</p><p>​              4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</p><p>​              5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//简略<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息1（不传参）&lt;/button&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;scnu&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo1</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(event.target.innerText)</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo2</span>(<span class="hljs-params">event,number</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(event,number)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="Vue中的事件修饰符"><a href="#Vue中的事件修饰符" class="headerlink" title="Vue中的事件修饰符"></a>Vue中的事件修饰符</h4><p>​            1.prevent：阻止默认事件（常用）；</p><p>​            2.stop：阻止事件冒泡（常用）；</p><p>​            3.once：事件只触发一次（常用）；</p><p>​            4.capture：使用事件的捕获模式；</p><p>​            5.self：只有event.target是当前操作的元素时才触发事件；</p><p>​            6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
